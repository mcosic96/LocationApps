// <auto-generated />
using System;
using Locations.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Locations.Common.DataContext.SqlServer.Migrations
{
    [DbContext(typeof(LocationsContext))]
    partial class LocationsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Locations.Shared.Geometry", b =>
                {
                    b.Property<int>("GeometryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeometryId"));

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<int?>("ViewPort")
                        .HasColumnType("int");

                    b.HasKey("GeometryId");

                    b.HasIndex("Location");

                    b.HasIndex("ViewPort");

                    b.ToTable("Geometries");
                });

            modelBuilder.Entity("Locations.Shared.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<float?>("lat")
                        .HasColumnType("real");

                    b.Property<float?>("lng")
                        .HasColumnType("real");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Locations.Shared.Northeast", b =>
                {
                    b.Property<int>("NortheastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NortheastId"));

                    b.Property<float?>("lat")
                        .HasColumnType("real");

                    b.Property<float?>("lng")
                        .HasColumnType("real");

                    b.HasKey("NortheastId");

                    b.ToTable("Northeasts");
                });

            modelBuilder.Entity("Locations.Shared.Opening_Hours", b =>
                {
                    b.Property<int>("OpeningHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpeningHoursId"));

                    b.Property<bool?>("open_now")
                        .HasColumnType("bit");

                    b.HasKey("OpeningHoursId");

                    b.ToTable("Opening_Hours");
                });

            modelBuilder.Entity("Locations.Shared.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<int?>("Photo")
                        .HasColumnType("int");

                    b.Property<int?>("height")
                        .HasColumnType("int");

                    b.Property<string>("photo_reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("width")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("Photo");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Locations.Shared.Place", b =>
                {
                    b.Property<int>("PlaceIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceIdentifier"));

                    b.Property<string>("error_message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("html_attr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("info_messages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("next_page_token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceIdentifier");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Locations.Shared.Plus_Code", b =>
                {
                    b.Property<int>("PlusCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlusCodeId"));

                    b.Property<string>("compound_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("global_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlusCodeId");

                    b.ToTable("Plus_Codes");
                });

            modelBuilder.Entity("Locations.Shared.Result", b =>
                {
                    b.Property<int?>("resultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("resultID"));

                    b.Property<int?>("Geometry")
                        .HasColumnType("int");

                    b.Property<int?>("OpeningHours")
                        .HasColumnType("int");

                    b.Property<int?>("PlusCode")
                        .HasColumnType("int");

                    b.Property<int?>("Result")
                        .HasColumnType("int");

                    b.Property<string>("business_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icon_background_color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icon_mask_base_uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("place_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("price_level")
                        .HasColumnType("int");

                    b.Property<float?>("rating")
                        .HasColumnType("real");

                    b.Property<string>("reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("user_ratings_total")
                        .HasColumnType("int");

                    b.Property<string>("vicinity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("resultID");

                    b.HasIndex("Geometry");

                    b.HasIndex("OpeningHours");

                    b.HasIndex("PlusCode");

                    b.HasIndex("Result");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Locations.Shared.SearchLocation", b =>
                {
                    b.Property<int>("SearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchId"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("Place")
                        .HasColumnType("int");

                    b.HasKey("SearchId");

                    b.HasIndex("Place");

                    b.ToTable("SearchLocations");
                });

            modelBuilder.Entity("Locations.Shared.Southwest", b =>
                {
                    b.Property<int>("SouthwestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SouthwestId"));

                    b.Property<float?>("lat")
                        .HasColumnType("real");

                    b.Property<float?>("lng")
                        .HasColumnType("real");

                    b.HasKey("SouthwestId");

                    b.ToTable("Southwests");
                });

            modelBuilder.Entity("Locations.Shared.Viewport", b =>
                {
                    b.Property<int>("ViewPortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewPortId"));

                    b.Property<int?>("Northeast")
                        .HasColumnType("int");

                    b.Property<int?>("Southwest")
                        .HasColumnType("int");

                    b.HasKey("ViewPortId");

                    b.HasIndex("Northeast");

                    b.HasIndex("Southwest");

                    b.ToTable("Viewports");
                });

            modelBuilder.Entity("Locations.Shared.Geometry", b =>
                {
                    b.HasOne("Locations.Shared.Location", "location")
                        .WithMany()
                        .HasForeignKey("Location");

                    b.HasOne("Locations.Shared.Viewport", "viewport")
                        .WithMany()
                        .HasForeignKey("ViewPort");

                    b.Navigation("location");

                    b.Navigation("viewport");
                });

            modelBuilder.Entity("Locations.Shared.Photo", b =>
                {
                    b.HasOne("Locations.Shared.Result", null)
                        .WithMany("photos")
                        .HasForeignKey("Photo");
                });

            modelBuilder.Entity("Locations.Shared.Result", b =>
                {
                    b.HasOne("Locations.Shared.Geometry", "geometry")
                        .WithMany()
                        .HasForeignKey("Geometry");

                    b.HasOne("Locations.Shared.Opening_Hours", "opening_hours")
                        .WithMany()
                        .HasForeignKey("OpeningHours");

                    b.HasOne("Locations.Shared.Plus_Code", "plus_code")
                        .WithMany()
                        .HasForeignKey("PlusCode");

                    b.HasOne("Locations.Shared.Place", null)
                        .WithMany("results")
                        .HasForeignKey("Result");

                    b.Navigation("geometry");

                    b.Navigation("opening_hours");

                    b.Navigation("plus_code");
                });

            modelBuilder.Entity("Locations.Shared.SearchLocation", b =>
                {
                    b.HasOne("Locations.Shared.Place", "places")
                        .WithMany()
                        .HasForeignKey("Place");

                    b.Navigation("places");
                });

            modelBuilder.Entity("Locations.Shared.Viewport", b =>
                {
                    b.HasOne("Locations.Shared.Northeast", "northeast")
                        .WithMany()
                        .HasForeignKey("Northeast");

                    b.HasOne("Locations.Shared.Southwest", "southwest")
                        .WithMany()
                        .HasForeignKey("Southwest");

                    b.Navigation("northeast");

                    b.Navigation("southwest");
                });

            modelBuilder.Entity("Locations.Shared.Place", b =>
                {
                    b.Navigation("results");
                });

            modelBuilder.Entity("Locations.Shared.Result", b =>
                {
                    b.Navigation("photos");
                });
#pragma warning restore 612, 618
        }
    }
}
